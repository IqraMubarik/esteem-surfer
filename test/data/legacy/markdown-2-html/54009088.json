{
  "id": 54009088,
  "input": "#### Repository & Pull Request\nhttps://github.com/knacksteem/knacksteem-api\nhttps://github.com/knacksteem/knacksteem-api/pull/5\n\n#### What is KnackSteem?\n\"Do you have any talent? If yes! then KnackSteem is for you.\"\n\"Rewards people with talents, it can be any talent, anything you know how to do best is highly welcome on the platform. \"\nSource: Discord Channel :D\n\n---\n#### Changes Made\n---\n\n##### Middleware to check if a user is a moderator\nSince some endpoints will be exclusively for moderators, a middleware to check if the current user is a moderator is needed to avoid unauthorized access. Basically, this middleware will check the username saved from the last middleware in the chain and will ask the database if this user is a moderator. If so, it will move to the next middleware. Otherwise, will tell the client that this user is not authorized to perform such action.\n\nRelated code:\n\nhttps://github.com/knacksteem/knacksteem-api/blob/master/src/api/middlewares/is_moderator.js\n\n##### Middleware to check if a user is a supervisor\nSame as the middleware mentioned above but in this case, for supervisors. The process is exactly the same but, of course, for supervisors.\n\nRelated code:\n\nhttps://github.com/knacksteem/knacksteem-api/blob/master/src/api/middlewares/is_supervisor.js\n\n##### Fetch all posts from Steem API using the permlinks from the database\nAs discussed with other developers in this project, we had to somehow query only our posts from the blockchain but having all the data updated. Also, we wanted to add custom filters like not-moderated posts, moderated posts, and so on. To achieve this, we've decided to only store author, permlink, and category of the post in the database. First, we grab all the permlinks and authors from the query and we make calls to the Steem API to complete the missing data of the posts. Thanks to libraries like async.js, we were able to make concurrent HTTP calls and join the results at the end.\n\nRelated code:\n\nhttps://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/posts.controller.js#L35\n\n\n##### Query posts by author\nThe method above allowed us to re-use this same code to perform a query by author in the database and complete the data using the same process mentioned above.\n\nRelated code:\n\nhttps://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/posts.controller.js#L117\n\n##### Documentation for endpoints\nOne of the things I really like about apidocs is that you can generate a documentation based on the comments of the routes in the API. For instance, look at the following:\n\n```\n/**\n * @api {post} v1/posts/create Create Post\n * @apiDescription Insert a post into the database\n * @apiVersion 1.0.0\n * @apiName createPost\n * @apiGroup Posts\n * @apiPermission user\n *\n * @apiHeader {String}   Authorization     SC2 User's access token\n *\n * @apiParam  {String}   permlink          Permlink of the post\n * TODO: Add validation to the parameters.\n *\n * @apiSuccess {Number}  status            http status response\n * @apiSuccess {String}  message           http return message\n *\n * @apiError (Unauthorized 401) Unauthorized Only authenticated users can create a post\n */\nrouter.route('/create').post(sc2Middleware, checkUserMiddleware, controller.createPost);\n```\n\nWill generate the following page:\n\n![Screen Shot 2018-06-22 at 9.26.23 PM.png](https://cdn.steemitimages.com/DQmYkpmRog53cpi5CVPKpWWC2Hj66sKQS6hA55pEKqREiMB/Screen%20Shot%202018-06-22%20at%209.26.23%20PM.png)\n\n##### Function to moderate a post\nThis is a moderation tool. Basically, it allows moderators and supervisors to edit the moderation object of any post. So, they can decide if the post is approved or not.\n\nRelated Code:\n\nhttps://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/moderator.controller.js#L4\n\n---\n\n##### Commits Overview\n---\n\n- https://github.com/knacksteem/knacksteem-api/pull/5/commits/b8fafa67b7fda38f05b6f9fd64418b85a5d53330\n- https://github.com/knacksteem/knacksteem-api/pull/5/commits/2d54636c18dee3d23dc90a5a38c9a5f58d60ed1a\n- https://github.com/knacksteem/knacksteem-api/pull/5/commits/45b6daff9e186d22a1ac15a9f481085f83b30f0a\n- https://github.com/knacksteem/knacksteem-api/pull/5/commits/8b1d3ab3f6021788ce25bb4b27cea76510feb761\n- https://github.com/knacksteem/knacksteem-api/pull/5/commits/92c7f85decdf63dded74674fc545f27251634af9\n- https://github.com/knacksteem/knacksteem-api/pull/5/commits/61c9ea373d2267bffe738228019082911bff429e\n- https://github.com/knacksteem/knacksteem-api/pull/5/commits/cce2275910c078994ef981b1a2897b0d7585d5a5",
  "result": "<h4>Repository &amp; Pull Request</h4>\n<p><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api\">https://github.com/knacksteem/knacksteem-api</a><br>\n<a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5\">https://github.com/knacksteem/knacksteem-api/pull/5</a></p>\n<h4>What is KnackSteem?</h4>\n<p>\"Do you have any talent? If yes! then KnackSteem is for you.\"<br>\n\"Rewards people with talents, it can be any talent, anything you know how to do best is highly welcome on the platform. \"<br>\nSource: Discord Channel :D</p>\n<hr>\n<h4>Changes Made</h4>\n<hr>\n<h5>Middleware to check if a user is a moderator</h5>\n<p>Since some endpoints will be exclusively for moderators, a middleware to check if the current user is a moderator is needed to avoid unauthorized access. Basically, this middleware will check the username saved from the last middleware in the chain and will ask the database if this user is a moderator. If so, it will move to the next middleware. Otherwise, will tell the client that this user is not authorized to perform such action.</p>\n<p>Related code:</p>\n<p><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/blob/master/src/api/middlewares/is_moderator.js\">https://github.com/knacksteem/knacksteem-api/blob/master/src/api/middlewares/is_moderator.js</a></p>\n<h5>Middleware to check if a user is a supervisor</h5>\n<p>Same as the middleware mentioned above but in this case, for supervisors. The process is exactly the same but, of course, for supervisors.</p>\n<p>Related code:</p>\n<p><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/blob/master/src/api/middlewares/is_supervisor.js\">https://github.com/knacksteem/knacksteem-api/blob/master/src/api/middlewares/is_supervisor.js</a></p>\n<h5>Fetch all posts from Steem API using the permlinks from the database</h5>\n<p>As discussed with other developers in this project, we had to somehow query only our posts from the blockchain but having all the data updated. Also, we wanted to add custom filters like not-moderated posts, moderated posts, and so on. To achieve this, we've decided to only store author, permlink, and category of the post in the database. First, we grab all the permlinks and authors from the query and we make calls to the Steem API to complete the missing data of the posts. Thanks to libraries like async.js, we were able to make concurrent HTTP calls and join the results at the end.</p>\n<p>Related code:</p>\n<p><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/posts.controller.js#L35\">https://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/posts.controller.js#L35</a></p>\n<h5>Query posts by author</h5>\n<p>The method above allowed us to re-use this same code to perform a query by author in the database and complete the data using the same process mentioned above.</p>\n<p>Related code:</p>\n<p><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/posts.controller.js#L117\">https://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/posts.controller.js#L117</a></p>\n<h5>Documentation for endpoints</h5>\n<p>One of the things I really like about apidocs is that you can generate a documentation based on the comments of the routes in the API. For instance, look at the following:</p>\n<pre><code>/**\n * @api {post} v1/posts/create Create Post\n * @apiDescription Insert a post into the database\n * @apiVersion 1.0.0\n * @apiName createPost\n * @apiGroup Posts\n * @apiPermission user\n *\n * @apiHeader {String}   Authorization     SC2 User's access token\n *\n * @apiParam  {String}   permlink          Permlink of the post\n * TODO: Add validation to the parameters.\n *\n * @apiSuccess {Number}  status            http status response\n * @apiSuccess {String}  message           http return message\n *\n * @apiError (Unauthorized 401) Unauthorized Only authenticated users can create a post\n */\nrouter.route('/create').post(sc2Middleware, checkUserMiddleware, controller.createPost);\n</code></pre>\n<p>Will generate the following page:</p>\n<p><img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmYkpmRog53cpi5CVPKpWWC2Hj66sKQS6hA55pEKqREiMB/Screen%20Shot%202018-06-22%20at%209.26.23%20PM.png\" alt=\"Screen Shot 2018-06-22 at 9.26.23 PM.png\"></p>\n<h5>Function to moderate a post</h5>\n<p>This is a moderation tool. Basically, it allows moderators and supervisors to edit the moderation object of any post. So, they can decide if the post is approved or not.</p>\n<p>Related Code:</p>\n<p><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/moderator.controller.js#L4\">https://github.com/knacksteem/knacksteem-api/blob/master/src/api/controllers/moderator.controller.js#L4</a></p>\n<hr>\n<h5>Commits Overview</h5>\n<hr>\n<ul>\n<li><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5/commits/b8fafa67b7fda38f05b6f9fd64418b85a5d53330\">https://github.com/knacksteem/knacksteem-api/pull/5/commits/b8fafa67b7fda38f05b6f9fd64418b85a5d53330</a></li>\n<li><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5/commits/2d54636c18dee3d23dc90a5a38c9a5f58d60ed1a\">https://github.com/knacksteem/knacksteem-api/pull/5/commits/2d54636c18dee3d23dc90a5a38c9a5f58d60ed1a</a></li>\n<li><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5/commits/45b6daff9e186d22a1ac15a9f481085f83b30f0a\">https://github.com/knacksteem/knacksteem-api/pull/5/commits/45b6daff9e186d22a1ac15a9f481085f83b30f0a</a></li>\n<li><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5/commits/8b1d3ab3f6021788ce25bb4b27cea76510feb761\">https://github.com/knacksteem/knacksteem-api/pull/5/commits/8b1d3ab3f6021788ce25bb4b27cea76510feb761</a></li>\n<li><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5/commits/92c7f85decdf63dded74674fc545f27251634af9\">https://github.com/knacksteem/knacksteem-api/pull/5/commits/92c7f85decdf63dded74674fc545f27251634af9</a></li>\n<li><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5/commits/61c9ea373d2267bffe738228019082911bff429e\">https://github.com/knacksteem/knacksteem-api/pull/5/commits/61c9ea373d2267bffe738228019082911bff429e</a></li>\n<li><a class=\"markdown-external-link\" data-href=\"https://github.com/knacksteem/knacksteem-api/pull/5/commits/cce2275910c078994ef981b1a2897b0d7585d5a5\">https://github.com/knacksteem/knacksteem-api/pull/5/commits/cce2275910c078994ef981b1a2897b0d7585d5a5</a></li>\n</ul>\n"
}
