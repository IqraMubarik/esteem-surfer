{
  "id": 54087252,
  "input": "## Repository: https://github.com/angularjs\n\n### What will I Learn?\n\nIn this tutorial, you will learn the following\n\n- Implement a dynamic Complimentary card for business\n- Use Angular JS to write text to HTML Canvas\n- Use Angular JS to draw objects / images to Canvas\n- Position elements within a Canvas\n- Download Canvas image\n\n### Requirements\n\nFor this tutorial, you will need the following\n\n- A laptop with any operating system such as Windows OS, Mac OSX and Linux\n- Your favorite text editor like Atom, Sublime Text and so on.\n- Knowledge of HTML, Bootstrap and JavaScript\n- Knowledge of HTML Canvas\n- Design tool such as Photoshop or CorelDraw\n- <a href=\"https://angularjs.org\">ANGULAR JS</a> script or include it using the cdn link <https://ajax.googleapis.com/ajax/libs/angularjs/1.6.10/angular.min.js>\n\n### Difficulty\n\n- Basic\n\n### Tutorial Content\n\n> Angular JS framework which operates exactly as Javascript, makes coding more simplified and easy to use with other programming languages.\n\n> Angular JS framework can be used to achieve variety of functionality and gives user more options and flexibility in implementing their designs and functionalities. \n\nWe might already know how to use the HTML Canvas using JavaScript but we intend using Angular JS framework for speed and efficiency. In this tutorial we intend creating dynamic ID card that can be generated by staffs of an organization.\n\n### Step 1: Getting Started\n\nFor this tutorial, we need to design a template of the ID card carrying fixed element contents for example:\n\n- Company Logo\n- Company Name\n- Image placeholder\n\nThe fixed elements are contents of the ID card that are not meant to change from one staff/user to another.\n\n <center>\n![template.png](https://cdn.steemitimages.com/DQmdEW6nVZdRsTFUT89qP8ZXintN8niQKx2FifNjXenCsE9/template.png)\n</center>\n <center>\n![Sample.png](https://cdn.steemitimages.com/DQmUP1Koeoof8FbYKju1vP1CGmuGDjuGzLuzfYtpD9Lfv9T/Sample.png)\n</center>\n\nYou can design your own ID card template using any design tool that you are familiar with and then export the design as either PNG (Portable Network Graphics) or JPEG (Joint Photograph Export Group). But for this project I exported my design as PNG (Portable Network Graphics). A sample of my ID card template is located in `assets/img/patterns/template.png` and the complete preview is located in `assets/img/patterns/sample.png`. Those can serve as a guide in designing your own card temple for this tutorial.\n\n### Step 2: Starting out template\n\nTo begin, we start with the default html template with the head and body tags. We link all necessary script files within the head tag, including our `angularjs` script. We also need another JS file called `app.js` where all our angular implementation details will be performed and also another JS script file for Javascript implementation details.\n\n__index.html__\n\n```html\n<!DOCTYPE html>\n<html ng-app = \"myApp\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Bussiness Design</title>\n    <link rel=\"shortcut icon\" href=\"assets/img/patterns/dimimpMask.png\">\n    <!-- Bootstrap itself -->\n    <link rel=\"stylesheet\" href=\"assets/font-awesome/css/font-awesome.min.css\">\n  \t<link href=\"assets/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\">\n  \t<!-- Custom styles -->\n  \t<link rel=\"stylesheet\" href=\"assets/css/main.css\">\n    <!-- Load js libs only when the page is loaded. -->\n    <script src=\"assets/js/jquery.min.js\"></script>\n    <script src=\"assets/js/angular.min.js\"></script>\n    <script src=\"assets/js/bootstrap.min.js\"></script>\n    <!-- Custom template scripts -->\n    <script src=\"assets/js/app.js\"></script>\n    <script src=\"assets/js/script.js\"></script>\n\n  </head>\n  <body ng-controller=\"MainCtrl\">\n\n    \n\n  </body>\n</html>\n```\n\n> Note: Our `index.html` file contains some new attributes within the html tag and another within the body tag.\n>\n> - `ng-app=\"myApp\"` is an angular directive that triggers angular js to function with the HTML DOM that it covers. It tells angular JS the area of the HTML to take charge of.\n> - `ng-controller=\"MainCtrl\"` is an angular controller created within the angular script `app.js` for manipulation of a particular area of the HTML DOM.\n\n__app.js__\n\n```js\n(function (){\n\n  var app = angular.module('myApp', []);\n\n  app.controller('MainCtrl', ['$scope', function($scope) {\n\n    \n  }]);\n\n\n}());\n\n```\n\nWe first have to create a directive in our blank `app.js` script file which allows us create a controller which is in-charger of a particular area of our html file. To create a directive, you call the `angular.module()` which requires the following parameters;\n\n- a name which is `myApp` and;\n- an empty array `[]` for dependencies such as `$scope`, `$http`, `$log` and so on.\n\nThe controller is then built based on the `app` directive that has been created earlier. We begin the controller with a controller name `MainCtrl`, a single dependency `$scope` and then a function with `$scope` as the  only parameter of the function. \n\n**NOTE:** The `$scope` parameter can be accessed anywhere within the confines of the `MainCtrl` controller in the html. Our `script.js` file will be blank for the mean time and check your console to find out if we have any errors generated before proceeding to the next step.\n\n### Step 3: HTML Canvas\n\nThe HTML Canvas is an element which is used to draw graphics on a web page, We learn to utilize it better by drawing multiple graphics within the canvas element, including text. We want to create a canvas that draws the template into the canvas. For the design of the site, we will be using bootstrap.\n\n```html\n<section>\n    <div class=\"container\">\n        <h1 class=\"text-center\">Sample Preview and Canvas</h1>\n        <div class=\"col-md-6\">\n            <!--<img src=\"assets/img/patterns/sample.png\" class=\"img img-responsive center-block\" alt=\"Sample ID Card\">-->\n        </div>\n        <div class=\"col-md-6\">\n            <canvas id=\"myCanvas\" width=\"555.753\" height=\"344.471\" style=\"border: 1px solid #000\"></canvas>\n            <button type=\"button\" class=\"btn btn-success btn-md\" ng-click=\"draw()\">Upload Image</button>\n        </div>\n    </div>\n</section>\n```\n\nWithin the body tag, we have in container that holds two separate columns. One carries the sample image and the other the canvas element where we will be drawing the template for further manipulations.\n\n- The canvas element carries and `id = \"myCanvas\"` with specified width and height as well as a border so we can see its size. \n- The button tag below the canvas element uses the angular `ng-click` directive to trigger the `draw()` function within the angular `MainCtrl` controller.\n\n <center>\n![Sample and Canvas.JPG](https://cdn.steemitimages.com/DQmTjGwuti5f2Ek5nYKKQWAYnC6af56x1GT5tVDc5JF4oHQ/Sample%20and%20Canvas.JPG)\n</center>\n\n__app.js__\n\n```js\n$scope.draw = function draw () {\n    //Draw canvas\n    var canvas = document.getElementById('myCanvas');\n    var context = canvas.getContext(\"2d\");\n    // Create Objects\n    var imageObj = new Image();\n    // Declare objects sources\n    imageObj.src = 'assets/img/patterns/template.png';\n    // Specify Width and height of each object\n    var width = 555.753;\n    var height = 344.471;\n    // Draw the image objects into the canvas\n    imageObj.onload = function() {\n    context.drawImage(imageObj, 0, 0, width, height);\n    }\n};\n```\n\nWhen the button is clicked, angular executes the `draw()` to draw the template to the canvas we have created within the HTML tag.\n\n- __Line 3:__ Gets the canvas element using the canvas id `myCanvas`\n\n- __Line 4:__ Creates a drawing object using an HTML built in function `getContext()` which has properties and methods\n\n- __Line 6 & 8:__ This steps defines an object to be drawn on the canvas and sets the object / image source.\n\n- __Line 10 & 11:__ You can also then specify the width and height of the objects should incase they are bigger in size than desired.\n\n- __Line 13 & 14:__ Draws the image unto the canvas once the object or image loads using the `drawImage()` providing the following properties:\n\n  ```js\n  context.drawImage(imageObj, hPoint, vPoint, width, height);\n  ```\n\n  - __imageObj:__ The image source to be drawn on the canvas\n  - __hPoint:__ The starting point of the `imageObj` on the horizontal axis \n  - __vPoint:__ The starting point of the `imageObj` on the vertical axis \n  - __width:__ The width of `imageObj` to be drawn\n  - __height:__ The height of `imageObj` to be drawn\n\n <center>\n![Canvas Image.JPG](https://cdn.steemitimages.com/DQmTkbHTE1j47kdBUpaU2igRCTqUWADwxXsGWkaDHq2utxt/Canvas%20Image.JPG)\n</center>\n\n### Step 4: Draw Uploaded Image on Canvas\n\nThe template design and sample design now looks similar, but the only difference is the image of the staff, name and other details below the staff image. We will modify our code snippet so we can upload different images and draw the image to the canvas.\n\nFirst we will remove the previous upload button, and create a new section that will house the upload button which will re-implemented to upload the selected image and then draw the image on the canvas at our specified position.\n\n```html\n<section id=\"upload\">\n    <div class=\"container\">\n        <h1 class=\"text-center\">Upload Image Section</h1>\n        <div class=\"col-md-6 col-md-offset-3\">\n            <div id='clock' style=\"margin: auto\"></div>\n            <input type='file' id='getval' name=\"background-image\" onchange=\"readURL(event)\" style=\"margin: auto\"/><br/>\n            <button type=\"button\" id=\"imageUploadBtn\" class=\"btn btn-success btn-md uploadBtn\" ng-click=\"write()\" style=\"margin: auto\">Upload Image</button>\n            <!--<img ng-src=\"\" id=\"imageP\" style=\"display:none\">-->\n        </div>\n    </div>\n</section><\n```\n\nAlso we need to add the following JavaScript event to help fix the image to the clock div and as well upload the image to the image tag with `id=\"imageP\"` so we can pick the image source for upload to the canvas. \n\n <center>\n![upload preview.JPG](https://cdn.steemitimages.com/DQmaqEe62YwhkPD3Sgj8k7FFXoJgSRB4sbm6hthaPE78Kdc/upload%20preview.JPG)\n</center>\n\n> The code snippet can be added below the body tag.\n\n```js\n<script type=\"text/javascript\">\n\t$(\"#details\").hide();\n\t$(\"#final\").hide();\n    function readURL(event){\n        var getImagePath = URL.createObjectURL(event.target.files[0]);\n        $('#clock').css('background-image', 'url(' + getImagePath + ')');\n        $(\"#imageP\").attr('src', getImagePath);\n        $('#imageUploadBtn').css(\"display\", \"none\");\n    }\n</script>\n```\n\n__Note:__ This script executes on when the value of the input file type changes using the jquery `onchange()`. \n\n- This script first gets the image file path to be uploaded and then sets it as a background-image to the div with `id=\"clock\"` through CSS which acts as a preview to the user.\n- Then the invisible trick not know to the user is the fact that we set the image path as a source to the img tag with `id=\"imgeP\"` which is hidden by default from the user.\n\n__app.js__\n\n```js\n$scope.draw = function draw () {\n\n    var x = $(\"#imageP\").attr('src');\n    //Draw canvas\n    var canvas = document.getElementById('myCanvas');\n    var context = canvas.getContext(\"2d\");\n    // Create Objects\n    var imageObj = new Image();\n    var imageObj_01 = new Image();\n    var imageObj_02 = new Image();\n    // Declare objects sources\n    imageObj.src = 'assets/img/patterns/template.png';\n    imageObj_01.src = x;\n    imageObj_02.src = 'assets/img/patterns/Logomask.png';\n    // Specify Width and height of each object\n    var width = 555.753;\n    var height = 344.471;\n    var width1 = 133;\n    var width2 = 57;\n    var height1 = 130.6;\n    var height2 = 49;\n    // Draw the image objects into the canvas\n    imageObj.onload = function() {\n        context.drawImage(imageObj, 0, 0, width, height);\n        context.drawImage(imageObj_01, 339.5, 82, width1, height1);\n        context.drawImage(imageObj_02, 373, 195, width2, height2);\n    }\n    \n    $(\"#upload\").hide();\n    $(\"#details\").show();\n\n};\n```\n\n__NOTE:__ The upload button looks similar to the previous one, but the difference is that we added new objects to be drawn to the canvas at various positions.\n\n- For every object to be drawn, we create a `new image()` and give it a value.\n- Two of the objects (imageObj and imageObj_02) to be drawn , has path already defined by the script except the image uploaded. So to get the image, we retrieve the source of `id=\"imageP\"`.\n- The heights and width of each imageObj is specified to fit the desired design.\n- We then carry out a try and error on the vPoint and hPoint of each imageObj based on the design. This is to enable you fit the image at the right position of the design.\n- The object meant to be be above another is drawn last, so it appears above other objects.\n- The last two lines 29 & 30, is to display a form for user details for drawing and hides the upload image form.\n\n<center>\n![uploaded preview.JPG](https://cdn.steemitimages.com/DQmVeeRL53yuvyyG6vVEanTG7UmjrUsG4cJbCLhNjYYuEYu/uploaded%20preview.JPG)\n</center>\n\n### Step 5: Add the text to the Design\n\nIncluding the text at various positions of the canvas is actually implemented same way we implement the positioning of graphics or objects on the canvas. We get the text from users as we tend to allow the template content to be dynamic based on the user details. We use HTML form to collect the details and use the angular `ng-model` directive for two-way data-binding. We also needed to limit the number of characters per input fields. \n\nThen when the form is submitted, we invoke the angular function called `submitWriteUp` and pass in the form details as parameters (using angular two-way binding) of the function so we can draw each form detail on the already created canvas `myCanvas`.\n\n__index.html__\n\n```html\n<section id=\"details\">\n    <div class=\"container\" style=\"margin-top: 50px\">\n        <div class=\"row\">\n            <div class=\"col-md-6 col-md-offset-3\">\n                <h1>Enter Required Details</h1>\n                <form ng-submit=\"submitWriteUp(name, position, phone, email, website)\">\n                    <div class=\"form-group\">\n                        <label>Name:</label>\n                        <input type=\"text\" ng-model=\"name\" value=\"\" required placeholder=\"Name\" class=\"form-control\" maxlength=\"24\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label>Position:</label>\n                        <input type=\"text\" ng-model=\"position\" value=\"\" placeholder=\"Position\" required class=\"form-control\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label>Phone:</label>\n                        <input type=\"text\" ng-model=\"phone\" value=\"\" placeholder=\"Phone number\" required class=\"form-control\" maxlength=\"24\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label>Email:</label>\n                        <input type=\"email\" ng-model=\"email\" value=\"\" required placeholder=\"Email\" class=\"form-control\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label>Website:</label>\n                        <input type=\"text\" ng-model=\"website\" value=\"\" required placeholder=\"Website\" class=\"form-control\" maxlength=\"6\">\n                    </div>\n                    <div class=\"form-group\">\n                        <button type=\"submit\" class=\"btn btn-success btn-md uploadBtn\">Submit Details</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</section>\n```\n\n<center>\n![form preview.JPG](https://cdn.steemitimages.com/DQmNMSZsMhiftAzM21p1aYc8jcsVqKzjR5q2ePfmTAcah7y/form%20preview.JPG)\n</center>\n\nWhen the form is submitted and we receive the form details, we will draw the details on the canvas at various position based on your design. The steps to drawing the text are as follows:\n\n- First we select the canvas `myCanvas` we want to draw on\n\n- Create a drawing object using an HTML built in function `getContext()` which has properties and methods.\n\n- We define the middle of the canvas using `canvas.width/2`. This gives you the middle of the canvas.\n\n- For each text to be drawn, you can define:\n\n  - __context.font:__ this defines the _font_ and _size_ of the text to drawn.\n  - __context.fillStyle:__ this define the _color_ of the text.\n  - __context.textAlign:__ this define alignment of the text whether center, left or right.\n\n- Then, we can now draw the text on the canvas using the `context.fillText()` function with the following parameters:\n\n  - __name:__ the text to be drawn on the canvas\n  - __hPoint:__ The horizontal position of the text to be drawn\n  - __vPoint:__ The vertical position of the text to be drawn\n\n  > __Note:__ The vPoint and hPoint can always very based on your template design so you tend to change the values and preview if it matches your desire else continue to change the value of the points.\n\n__app.js__\n\n```js\n$scope.submitWriteUp = function (name, position, phone, email, website) {\n\n    var canvas = document.getElementById('myCanvas');\n\n    var context = canvas.getContext(\"2d\");\n\n    var middle = canvas.width/2;\n\n    context.font = \"19px ExoRegular\";\n    context.fillStyle = \"#fff\";\n    context.textAlign = \"center\";\n    context.fillText(name, middle+130, 40);\n    // Other  writeups drawn with different style\n    context.font = \"17px ExoRegular\";\n    context.fillText(position, middle+130, 60);\n    context.font = \"12px ExoRegular\";\n    context.fillText(phone, middle+150, 264);\n    context.fillText(email, middle+139, 288);\n    context.fillText(website, middle+142, 313);\n};\n\n$scope.submitWriteUp();\n$(\"#final\").hide();\n```\n\n> __Note:__ To specify new fonts, style and textAlign for different details, you need to specify the values of this parameters before drawing the text.\n\n<center>\n![textPreview.JPG](https://cdn.steemitimages.com/DQma835seh71yN98sQP59vrJYRFuHiPxskZqbnBgdoUBcsR/textPreview.JPG)\n</center>\n\n### Step 6: Download the Canvas as image\n\nThe final step is to download the generated image within the canvas. One simple way is for the user to right click on the canvas and select \"save image as\" and select a location where it will be saved and the image will be download.\n\nBut we want to hide the form details and display a final preview of the image with a button to download the image by clicking on the button. So we can add some code snippet within the `submitWriteUp` scope function so that we can attach the image to a final `<div>` and the button for it to be downloaded. \n\nSo we create a new section with an id, within it is a div with `id=\"finalPreview\"` to hold the final image and then a button for downloading the image with `id=\"download\"`.\n\n__index.html__\n\n```html\n<section id=\"final\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-4 col-md-offset-4\">\n                <div id=\"finalPreview\"></div>\n                <a id=\"download\" href=\"\" download=\"utopian.png\" target=\"_blank\" >\n                <input type=\"button\" value=\"Download\" class=\"btn btn-success btn-md \tuploadBtn\"/>\n                </a>\n            </div>\n        </div>\n    </div>\n</section>\n```\n\nWe need to modify our `submitWriteUp` scope to append the image within the canvas to the `finalPreview` div and also the `href` of the `download` button. We will add the code snippet below within the `submitWriteUp` scope function.\n\n__app.js__\n\n```js\n    img.src = canvas.toDataURL();\n    var src = canvas.toDataURL();\n    var image = '<!--<img src=\"'+src+'\" class=\"img img-responsive\"/>-->';\n    $('#download').attr('href', src);\n    $('#finalPreview').prepend(image);\n    $(\"#final\").show();\n    $(\"#details\").hide();\n```\n\n> __Note:__ \n>\n> - Line 1 and 2 converts the image within the canvas to a URL which hold the image data. \n> - Line 3 we create an image which will be appended to `finalPreview` as a preview of the canvas image. \n> - Then the source `src` of the image is added as the `href` of the download button for download.\n> - Then we can now hide the `details` section and display the `final` section with the download button. \n\n<center>\n![DownloadOption.JPG](https://cdn.steemitimages.com/DQmTSkoh7oQDnRA6UB75rNkP8PKFeyJhXYEyb4s9fGhhsAh/DownloadOption.JPG)\n</center>\n\n#### SAMPLE PREVIEW OF THE DOWNLOADED IMAGE\n\n<center>\n![steemjet (2).png](https://cdn.steemitimages.com/DQmXNHAs6URV3gMPqfcq41XrcUMJJVKJHEJb1cC9iQRUU4U/steemjet%20(2).png)\n</center>\n\n> Please uncomment all image tags within the code snippets when using them because while uploading this post, I had image upload conflicts. Thanks\n\n### Check out full code snippet for this step in <a href=\"https://github.com/chrix95/angularjs_design/blob/master/index.html\">index.html</a>, <a href=\"https://github.com/chrix95/angularjs_design/tree/master/assets/js/app.js\">app.js</a> and <a href=\"https://github.com/chrix95/angularjs_design/tree/master/assets/css/main.css\">main.css</a>.\n\n### Video of Work Done\n\n![ezgif.com-video-to-gif.gif](https://cdn.steemitimages.com/DQmaw8W3r6jgaNe8z9iz66a8rme9eQdqYz8CfoH6rqNyAV3/ezgif.com-video-to-gif.gif)\n\n### Previous Tutorials\n\n- <https://steemit.com/utopian-io/@chri5h/consuming-github-api-using-angular-js>\n- <https://steemit.com/utopian-io/@chri5h/using-angular-js-to-send-ajax-request-to-php-part-1>\n- <https://steemit.com/utopian-io/@chri5h/using-angular-js-to-send-ajax-request-php-part-2-html-forms-to-php-server>\n- <https://steemit.com/utopian-io/@chri5h/using-angular-js-to-send-ajax-request-php-part-3-html-forms-to-php-server>\n\n### Proof of Work Done\n\nI hope you find this tutorial very useful and you can access the complete code for this tutorial in the <a href=\"https://github.com/chrix95/angularjs_design\">github repo</a>.",
  "result": "<h2>Repository: <a class=\"markdown-external-link\" data-href=\"https://github.com/angularjs\">https://github.com/angularjs</a></h2>\n<h3>What will I Learn?</h3>\n<p>In this tutorial, you will learn the following</p>\n<ul>\n<li>Implement a dynamic Complimentary card for business</li>\n<li>Use Angular JS to write text to HTML Canvas</li>\n<li>Use Angular JS to draw objects / images to Canvas</li>\n<li>Position elements within a Canvas</li>\n<li>Download Canvas image</li>\n</ul>\n<h3>Requirements</h3>\n<p>For this tutorial, you will need the following</p>\n<ul>\n<li>A laptop with any operating system such as Windows OS, Mac OSX and Linux</li>\n<li>Your favorite text editor like Atom, Sublime Text and so on.</li>\n<li>Knowledge of HTML, Bootstrap and JavaScript</li>\n<li>Knowledge of HTML Canvas</li>\n<li>Design tool such as Photoshop or CorelDraw</li>\n<li><a class=\"markdown-external-link\" data-href=\"https://angularjs.org\">ANGULAR JS</a> script or include it using the cdn link <a class=\"markdown-external-link\" data-href=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.10/angular.min.js\">https://ajax.googleapis.com/ajax/libs/angularjs/1.6.10/angular.min.js</a></li>\n</ul>\n<h3>Difficulty</h3>\n<ul>\n<li>Basic</li>\n</ul>\n<h3>Tutorial Content</h3>\n<blockquote>\n<p>Angular JS framework which operates exactly as Javascript, makes coding more simplified and easy to use with other programming languages.</p>\n</blockquote>\n<blockquote>\n<p>Angular JS framework can be used to achieve variety of functionality and gives user more options and flexibility in implementing their designs and functionalities.</p>\n</blockquote>\n<p>We might already know how to use the HTML Canvas using JavaScript but we intend using Angular JS framework for speed and efficiency. In this tutorial we intend creating dynamic ID card that can be generated by staffs of an organization.</p>\n<h3>Step 1: Getting Started</h3>\n<p>For this tutorial, we need to design a template of the ID card carrying fixed element contents for example:</p>\n<ul>\n<li>Company Logo</li>\n<li>Company Name</li>\n<li>Image placeholder</li>\n</ul>\n<p>The fixed elements are contents of the ID card that are not meant to change from one staff/user to another.</p>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmdEW6nVZdRsTFUT89qP8ZXintN8niQKx2FifNjXenCsE9/template.png\" alt=\"template.png\"><br>\n</center><br>\n<center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmUP1Koeoof8FbYKju1vP1CGmuGDjuGzLuzfYtpD9Lfv9T/Sample.png\" alt=\"Sample.png\"><br>\n</center><p></p>\n<p>You can design your own ID card template using any design tool that you are familiar with and then export the design as either PNG (Portable Network Graphics) or JPEG (Joint Photograph Export Group). But for this project I exported my design as PNG (Portable Network Graphics). A sample of my ID card template is located in <code>assets/img/patterns/template.png</code> and the complete preview is located in <code>assets/img/patterns/sample.png</code>. Those can serve as a guide in designing your own card temple for this tutorial.</p>\n<h3>Step 2: Starting out template</h3>\n<p>To begin, we start with the default html template with the head and body tags. We link all necessary script files within the head tag, including our <code>angularjs</code> script. We also need another JS file called <code>app.js</code> where all our angular implementation details will be performed and also another JS script file for Javascript implementation details.</p>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html ng-app = \"myApp\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Bussiness Design&lt;/title&gt;\n    &lt;link rel=\"shortcut icon\" href=\"assets/img/patterns/dimimpMask.png\"&gt;\n    &lt;!-- Bootstrap itself --&gt;\n    &lt;link rel=\"stylesheet\" href=\"assets/font-awesome/css/font-awesome.min.css\"&gt;\n    &lt;link href=\"assets/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;!-- Custom styles --&gt;\n    &lt;link rel=\"stylesheet\" href=\"assets/css/main.css\"&gt;\n    &lt;!-- Load js libs only when the page is loaded. --&gt;\n    &lt;script src=\"assets/js/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"assets/js/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"assets/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n    &lt;!-- Custom template scripts --&gt;\n    &lt;script src=\"assets/js/app.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"assets/js/script.js\"&gt;&lt;/script&gt;\n\n  &lt;/head&gt;\n  &lt;body ng-controller=\"MainCtrl\"&gt;\n\n    \n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<blockquote>\n<p>Note: Our <code>index.html</code> file contains some new attributes within the html tag and another within the body tag.</p>\n<ul>\n<li><code>ng-app=\"myApp\"</code> is an angular directive that triggers angular js to function with the HTML DOM that it covers. It tells angular JS the area of the HTML to take charge of.</li>\n<li><code>ng-controller=\"MainCtrl\"</code> is an angular controller created within the angular script <code>app.js</code> for manipulation of a particular area of the HTML DOM.</li>\n</ul>\n</blockquote>\n<p><strong>app.js</strong></p>\n<pre><code class=\"language-js\">(function (){\n\n  var app = angular.module('myApp', []);\n\n  app.controller('MainCtrl', ['$scope', function($scope) {\n\n    \n  }]);\n\n\n}());\n\n</code></pre>\n<p>We first have to create a directive in our blank <code>app.js</code> script file which allows us create a controller which is in-charger of a particular area of our html file. To create a directive, you call the <code>angular.module()</code> which requires the following parameters;</p>\n<ul>\n<li>a name which is <code>myApp</code> and;</li>\n<li>an empty array <code>[]</code> for dependencies such as <code>$scope</code>, <code>$http</code>, <code>$log</code> and so on.</li>\n</ul>\n<p>The controller is then built based on the <code>app</code> directive that has been created earlier. We begin the controller with a controller name <code>MainCtrl</code>, a single dependency <code>$scope</code> and then a function with <code>$scope</code> as the  only parameter of the function.</p>\n<p><strong>NOTE:</strong> The <code>$scope</code> parameter can be accessed anywhere within the confines of the <code>MainCtrl</code> controller in the html. Our <code>script.js</code> file will be blank for the mean time and check your console to find out if we have any errors generated before proceeding to the next step.</p>\n<h3>Step 3: HTML Canvas</h3>\n<p>The HTML Canvas is an element which is used to draw graphics on a web page, We learn to utilize it better by drawing multiple graphics within the canvas element, including text. We want to create a canvas that draws the template into the canvas. For the design of the site, we will be using bootstrap.</p>\n<pre><code class=\"language-html\">&lt;section&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1 class=\"text-center\"&gt;Sample Preview and Canvas&lt;/h1&gt;\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;!--&lt;img src=\"assets/img/patterns/sample.png\" class=\"img img-responsive center-block\" alt=\"Sample ID Card\"&gt;--&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md-6\"&gt;\n            &lt;canvas id=\"myCanvas\" width=\"555.753\" height=\"344.471\" style=\"border: 1px solid #000\"&gt;&lt;/canvas&gt;\n            &lt;button type=\"button\" class=\"btn btn-success btn-md\" ng-click=\"draw()\"&gt;Upload Image&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<p>Within the body tag, we have in container that holds two separate columns. One carries the sample image and the other the canvas element where we will be drawing the template for further manipulations.</p>\n<ul>\n<li>The canvas element carries and <code>id = \"myCanvas\"</code> with specified width and height as well as a border so we can see its size.</li>\n<li>The button tag below the canvas element uses the angular <code>ng-click</code> directive to trigger the <code>draw()</code> function within the angular <code>MainCtrl</code> controller.</li>\n</ul>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmTjGwuti5f2Ek5nYKKQWAYnC6af56x1GT5tVDc5JF4oHQ/Sample%20and%20Canvas.JPG\" alt=\"Sample and Canvas.JPG\"><br>\n</center><p></p>\n<p><strong>app.js</strong></p>\n<pre><code class=\"language-js\">$scope.draw = function draw () {\n    //Draw canvas\n    var canvas = document.getElementById('myCanvas');\n    var context = canvas.getContext(\"2d\");\n    // Create Objects\n    var imageObj = new Image();\n    // Declare objects sources\n    imageObj.src = 'assets/img/patterns/template.png';\n    // Specify Width and height of each object\n    var width = 555.753;\n    var height = 344.471;\n    // Draw the image objects into the canvas\n    imageObj.onload = function() {\n    context.drawImage(imageObj, 0, 0, width, height);\n    }\n};\n</code></pre>\n<p>When the button is clicked, angular executes the <code>draw()</code> to draw the template to the canvas we have created within the HTML tag.</p>\n<ul>\n<li><p><strong>Line 3:</strong> Gets the canvas element using the canvas id <code>myCanvas</code></p></li>\n<li><p><strong>Line 4:</strong> Creates a drawing object using an HTML built in function <code>getContext()</code> which has properties and methods</p></li>\n<li><p><strong>Line 6 &amp; 8:</strong> This steps defines an object to be drawn on the canvas and sets the object / image source.</p></li>\n<li><p><strong>Line 10 &amp; 11:</strong> You can also then specify the width and height of the objects should incase they are bigger in size than desired.</p></li>\n<li><p><strong>Line 13 &amp; 14:</strong> Draws the image unto the canvas once the object or image loads using the <code>drawImage()</code> providing the following properties:</p>\n<pre><code class=\"language-js\">context.drawImage(imageObj, hPoint, vPoint, width, height);\n</code></pre>\n<ul>\n<li><strong>imageObj:</strong> The image source to be drawn on the canvas</li>\n<li><strong>hPoint:</strong> The starting point of the <code>imageObj</code> on the horizontal axis</li>\n<li><strong>vPoint:</strong> The starting point of the <code>imageObj</code> on the vertical axis</li>\n<li><strong>width:</strong> The width of <code>imageObj</code> to be drawn</li>\n<li><strong>height:</strong> The height of <code>imageObj</code> to be drawn</li>\n</ul></li>\n</ul>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmTkbHTE1j47kdBUpaU2igRCTqUWADwxXsGWkaDHq2utxt/Canvas%20Image.JPG\" alt=\"Canvas Image.JPG\"><br>\n</center><p></p>\n<h3>Step 4: Draw Uploaded Image on Canvas</h3>\n<p>The template design and sample design now looks similar, but the only difference is the image of the staff, name and other details below the staff image. We will modify our code snippet so we can upload different images and draw the image to the canvas.</p>\n<p>First we will remove the previous upload button, and create a new section that will house the upload button which will re-implemented to upload the selected image and then draw the image on the canvas at our specified position.</p>\n<pre><code class=\"language-html\">&lt;section id=\"upload\"&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1 class=\"text-center\"&gt;Upload Image Section&lt;/h1&gt;\n        &lt;div class=\"col-md-6 col-md-offset-3\"&gt;\n            &lt;div id='clock' style=\"margin: auto\"&gt;&lt;/div&gt;\n            &lt;input type='file' id='getval' name=\"background-image\" onchange=\"readURL(event)\" style=\"margin: auto\"/&gt;&lt;br/&gt;\n            &lt;button type=\"button\" id=\"imageUploadBtn\" class=\"btn btn-success btn-md uploadBtn\" ng-click=\"write()\" style=\"margin: auto\"&gt;Upload Image&lt;/button&gt;\n            &lt;!--&lt;img ng-src=\"\" id=\"imageP\" style=\"display:none\"&gt;--&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;&lt;\n</code></pre>\n<p>Also we need to add the following JavaScript event to help fix the image to the clock div and as well upload the image to the image tag with <code>id=\"imageP\"</code> so we can pick the image source for upload to the canvas.</p>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmaqEe62YwhkPD3Sgj8k7FFXoJgSRB4sbm6hthaPE78Kdc/upload%20preview.JPG\" alt=\"upload preview.JPG\"><br>\n</center><p></p>\n<blockquote>\n<p>The code snippet can be added below the body tag.</p>\n</blockquote>\n<pre><code class=\"language-js\">&lt;script type=\"text/javascript\"&gt;\n    $(\"#details\").hide();\n    $(\"#final\").hide();\n    function readURL(event){\n        var getImagePath = URL.createObjectURL(event.target.files[0]);\n        $('#clock').css('background-image', 'url(' + getImagePath + ')');\n        $(\"#imageP\").attr('src', getImagePath);\n        $('#imageUploadBtn').css(\"display\", \"none\");\n    }\n&lt;/script&gt;\n</code></pre>\n<p><strong>Note:</strong> This script executes on when the value of the input file type changes using the jquery <code>onchange()</code>.</p>\n<ul>\n<li>This script first gets the image file path to be uploaded and then sets it as a background-image to the div with <code>id=\"clock\"</code> through CSS which acts as a preview to the user.</li>\n<li>Then the invisible trick not know to the user is the fact that we set the image path as a source to the img tag with <code>id=\"imgeP\"</code> which is hidden by default from the user.</li>\n</ul>\n<p><strong>app.js</strong></p>\n<pre><code class=\"language-js\">$scope.draw = function draw () {\n\n    var x = $(\"#imageP\").attr('src');\n    //Draw canvas\n    var canvas = document.getElementById('myCanvas');\n    var context = canvas.getContext(\"2d\");\n    // Create Objects\n    var imageObj = new Image();\n    var imageObj_01 = new Image();\n    var imageObj_02 = new Image();\n    // Declare objects sources\n    imageObj.src = 'assets/img/patterns/template.png';\n    imageObj_01.src = x;\n    imageObj_02.src = 'assets/img/patterns/Logomask.png';\n    // Specify Width and height of each object\n    var width = 555.753;\n    var height = 344.471;\n    var width1 = 133;\n    var width2 = 57;\n    var height1 = 130.6;\n    var height2 = 49;\n    // Draw the image objects into the canvas\n    imageObj.onload = function() {\n        context.drawImage(imageObj, 0, 0, width, height);\n        context.drawImage(imageObj_01, 339.5, 82, width1, height1);\n        context.drawImage(imageObj_02, 373, 195, width2, height2);\n    }\n    \n    $(\"#upload\").hide();\n    $(\"#details\").show();\n\n};\n</code></pre>\n<p><strong>NOTE:</strong> The upload button looks similar to the previous one, but the difference is that we added new objects to be drawn to the canvas at various positions.</p>\n<ul>\n<li>For every object to be drawn, we create a <code>new image()</code> and give it a value.</li>\n<li>Two of the objects (imageObj and imageObj_02) to be drawn , has path already defined by the script except the image uploaded. So to get the image, we retrieve the source of <code>id=\"imageP\"</code>.</li>\n<li>The heights and width of each imageObj is specified to fit the desired design.</li>\n<li>We then carry out a try and error on the vPoint and hPoint of each imageObj based on the design. This is to enable you fit the image at the right position of the design.</li>\n<li>The object meant to be be above another is drawn last, so it appears above other objects.</li>\n<li>The last two lines 29 &amp; 30, is to display a form for user details for drawing and hides the upload image form.</li>\n</ul>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmVeeRL53yuvyyG6vVEanTG7UmjrUsG4cJbCLhNjYYuEYu/uploaded%20preview.JPG\" alt=\"uploaded preview.JPG\"><br>\n</center><p></p>\n<h3>Step 5: Add the text to the Design</h3>\n<p>Including the text at various positions of the canvas is actually implemented same way we implement the positioning of graphics or objects on the canvas. We get the text from users as we tend to allow the template content to be dynamic based on the user details. We use HTML form to collect the details and use the angular <code>ng-model</code> directive for two-way data-binding. We also needed to limit the number of characters per input fields.</p>\n<p>Then when the form is submitted, we invoke the angular function called <code>submitWriteUp</code> and pass in the form details as parameters (using angular two-way binding) of the function so we can draw each form detail on the already created canvas <code>myCanvas</code>.</p>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">&lt;section id=\"details\"&gt;\n    &lt;div class=\"container\" style=\"margin-top: 50px\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-6 col-md-offset-3\"&gt;\n                &lt;h1&gt;Enter Required Details&lt;/h1&gt;\n                &lt;form ng-submit=\"submitWriteUp(name, position, phone, email, website)\"&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label&gt;Name:&lt;/label&gt;\n                        &lt;input type=\"text\" ng-model=\"name\" value=\"\" required placeholder=\"Name\" class=\"form-control\" maxlength=\"24\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label&gt;Position:&lt;/label&gt;\n                        &lt;input type=\"text\" ng-model=\"position\" value=\"\" placeholder=\"Position\" required class=\"form-control\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label&gt;Phone:&lt;/label&gt;\n                        &lt;input type=\"text\" ng-model=\"phone\" value=\"\" placeholder=\"Phone number\" required class=\"form-control\" maxlength=\"24\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label&gt;Email:&lt;/label&gt;\n                        &lt;input type=\"email\" ng-model=\"email\" value=\"\" required placeholder=\"Email\" class=\"form-control\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label&gt;Website:&lt;/label&gt;\n                        &lt;input type=\"text\" ng-model=\"website\" value=\"\" required placeholder=\"Website\" class=\"form-control\" maxlength=\"6\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;button type=\"submit\" class=\"btn btn-success btn-md uploadBtn\"&gt;Submit Details&lt;/button&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmNMSZsMhiftAzM21p1aYc8jcsVqKzjR5q2ePfmTAcah7y/form%20preview.JPG\" alt=\"form preview.JPG\"><br>\n</center><p></p>\n<p>When the form is submitted and we receive the form details, we will draw the details on the canvas at various position based on your design. The steps to drawing the text are as follows:</p>\n<ul>\n<li><p>First we select the canvas <code>myCanvas</code> we want to draw on</p></li>\n<li><p>Create a drawing object using an HTML built in function <code>getContext()</code> which has properties and methods.</p></li>\n<li><p>We define the middle of the canvas using <code>canvas.width/2</code>. This gives you the middle of the canvas.</p></li>\n<li><p>For each text to be drawn, you can define:</p>\n<ul>\n<li><strong>context.font:</strong> this defines the <em>font</em> and <em>size</em> of the text to drawn.</li>\n<li><strong>context.fillStyle:</strong> this define the <em>color</em> of the text.</li>\n<li><strong>context.textAlign:</strong> this define alignment of the text whether center, left or right.</li>\n</ul></li>\n<li><p>Then, we can now draw the text on the canvas using the <code>context.fillText()</code> function with the following parameters:</p>\n<ul>\n<li><strong>name:</strong> the text to be drawn on the canvas</li>\n<li><strong>hPoint:</strong> The horizontal position of the text to be drawn</li>\n<li><strong>vPoint:</strong> The vertical position of the text to be drawn</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> The vPoint and hPoint can always very based on your template design so you tend to change the values and preview if it matches your desire else continue to change the value of the points.</p>\n</blockquote></li>\n</ul>\n<p><strong>app.js</strong></p>\n<pre><code class=\"language-js\">$scope.submitWriteUp = function (name, position, phone, email, website) {\n\n    var canvas = document.getElementById('myCanvas');\n\n    var context = canvas.getContext(\"2d\");\n\n    var middle = canvas.width/2;\n\n    context.font = \"19px ExoRegular\";\n    context.fillStyle = \"#fff\";\n    context.textAlign = \"center\";\n    context.fillText(name, middle+130, 40);\n    // Other  writeups drawn with different style\n    context.font = \"17px ExoRegular\";\n    context.fillText(position, middle+130, 60);\n    context.font = \"12px ExoRegular\";\n    context.fillText(phone, middle+150, 264);\n    context.fillText(email, middle+139, 288);\n    context.fillText(website, middle+142, 313);\n};\n\n$scope.submitWriteUp();\n$(\"#final\").hide();\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> To specify new fonts, style and textAlign for different details, you need to specify the values of this parameters before drawing the text.</p>\n</blockquote>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQma835seh71yN98sQP59vrJYRFuHiPxskZqbnBgdoUBcsR/textPreview.JPG\" alt=\"textPreview.JPG\"><br>\n</center><p></p>\n<h3>Step 6: Download the Canvas as image</h3>\n<p>The final step is to download the generated image within the canvas. One simple way is for the user to right click on the canvas and select \"save image as\" and select a location where it will be saved and the image will be download.</p>\n<p>But we want to hide the form details and display a final preview of the image with a button to download the image by clicking on the button. So we can add some code snippet within the <code>submitWriteUp</code> scope function so that we can attach the image to a final <code>&lt;div&gt;</code> and the button for it to be downloaded.</p>\n<p>So we create a new section with an id, within it is a div with <code>id=\"finalPreview\"</code> to hold the final image and then a button for downloading the image with <code>id=\"download\"</code>.</p>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">&lt;section id=\"final\"&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-md-4 col-md-offset-4\"&gt;\n                &lt;div id=\"finalPreview\"&gt;&lt;/div&gt;\n                &lt;a id=\"download\" href=\"\" download=\"utopian.png\" target=\"_blank\" &gt;\n                &lt;input type=\"button\" value=\"Download\" class=\"btn btn-success btn-md     uploadBtn\"/&gt;\n                &lt;/a&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<p>We need to modify our <code>submitWriteUp</code> scope to append the image within the canvas to the <code>finalPreview</code> div and also the <code>href</code> of the <code>download</code> button. We will add the code snippet below within the <code>submitWriteUp</code> scope function.</p>\n<p><strong>app.js</strong></p>\n<pre><code class=\"language-js\">    img.src = canvas.toDataURL();\n    var src = canvas.toDataURL();\n    var image = '&lt;!--&lt;img src=\"'+src+'\" class=\"img img-responsive\"/&gt;--&gt;';\n    $('#download').attr('href', src);\n    $('#finalPreview').prepend(image);\n    $(\"#final\").show();\n    $(\"#details\").hide();\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Line 1 and 2 converts the image within the canvas to a URL which hold the image data.</li>\n<li>Line 3 we create an image which will be appended to <code>finalPreview</code> as a preview of the canvas image.</li>\n<li>Then the source <code>src</code> of the image is added as the <code>href</code> of the download button for download.</li>\n<li>Then we can now hide the <code>details</code> section and display the <code>final</code> section with the download button.</li>\n</ul>\n</blockquote>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmTSkoh7oQDnRA6UB75rNkP8PKFeyJhXYEyb4s9fGhhsAh/DownloadOption.JPG\" alt=\"DownloadOption.JPG\"><br>\n</center><p></p>\n<h4>SAMPLE PREVIEW OF THE DOWNLOADED IMAGE</h4>\n<p></p><center><br>\n<img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmXNHAs6URV3gMPqfcq41XrcUMJJVKJHEJb1cC9iQRUU4U/steemjet%20(2).png\" alt=\"steemjet (2).png\"><br>\n</center><p></p>\n<blockquote>\n<p>Please uncomment all image tags within the code snippets when using them because while uploading this post, I had image upload conflicts. Thanks</p>\n</blockquote>\n<h3>Check out full code snippet for this step in <a class=\"markdown-external-link\" data-href=\"https://github.com/chrix95/angularjs_design/blob/master/index.html\">index.html</a>, <a class=\"markdown-external-link\" data-href=\"https://github.com/chrix95/angularjs_design/tree/master/assets/js/app.js\">app.js</a> and <a class=\"markdown-external-link\" data-href=\"https://github.com/chrix95/angularjs_design/tree/master/assets/css/main.css\">main.css</a>.</h3>\n<h3>Video of Work Done</h3>\n<p><img src=\"https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmaw8W3r6jgaNe8z9iz66a8rme9eQdqYz8CfoH6rqNyAV3/ezgif.com-video-to-gif.gif\" alt=\"ezgif.com-video-to-gif.gif\"></p>\n<h3>Previous Tutorials</h3>\n<ul>\n<li><a class=\"markdown-post-link\" data-tag=\"utopian-io\" data-author=\"chri5h\" data-permlink=\"consuming-github-api-using-angular-js\">https://steemit.com/utopian-io/@chri5h/consuming-github-api-using-angular-js</a></li>\n<li><a class=\"markdown-post-link\" data-tag=\"utopian-io\" data-author=\"chri5h\" data-permlink=\"using-angular-js-to-send-ajax-request-to-php-part-1\">https://steemit.com/utopian-io/@chri5h/using-angular-js-to-send-ajax-request-to-php-part-1</a></li>\n<li><a class=\"markdown-post-link\" data-tag=\"utopian-io\" data-author=\"chri5h\" data-permlink=\"using-angular-js-to-send-ajax-request-php-part-2-html-forms-to-php-server\">https://steemit.com/utopian-io/@chri5h/using-angular-js-to-send-ajax-request-php-part-2-html-forms-to-php-server</a></li>\n<li><a class=\"markdown-post-link\" data-tag=\"utopian-io\" data-author=\"chri5h\" data-permlink=\"using-angular-js-to-send-ajax-request-php-part-3-html-forms-to-php-server\">https://steemit.com/utopian-io/@chri5h/using-angular-js-to-send-ajax-request-php-part-3-html-forms-to-php-server</a></li>\n</ul>\n<h3>Proof of Work Done</h3>\n<p>I hope you find this tutorial very useful and you can access the complete code for this tutorial in the <a class=\"markdown-external-link\" data-href=\"https://github.com/chrix95/angularjs_design\">github repo</a>.</p>\n"
}
